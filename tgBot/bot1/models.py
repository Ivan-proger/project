from django.db import models
from django.utils import timezone
from asgiref.sync import sync_to_async

#–Ω–∞—à–∏ —é–∑–µ—Ä—ãü•∞
class Users(models.Model):
    external_id = models.PositiveIntegerField(verbose_name='–¢–µ–ª–µ–≥—Ä–∞–º ID')
    name = models.CharField(max_length=32, blank=True, null=True, default="")
    is_superuser = models.BooleanField(default=False, verbose_name='–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º')
    is_subscription = models.BooleanField(default=False, verbose_name='–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª—ã-—Å–ø–æ—Å–Ω–æ—Ä—ã')
    last_activity = models.DateTimeField(default=timezone.now, verbose_name='–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')

    @sync_to_async
    def update_last_activity(self):
        self.last_activity = timezone.now()
        self.save()

    class Meta:
        verbose_name = '–Æ–∑–µ—Ä'
        verbose_name_plural = '–Æ–∑–µ—Ä—ã'

    def __str__(self):
        if self.name:
            return f'{self.name} ({str(self.external_id)})'
        else:
            return str(self.external_id)

#–∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏–≤—è–∑–∞–Ω—ã –≤—Å–µ –≤–∏–¥–µ–æ
class Series(models.Model):
    poster = models.CharField(max_length=64, blank=True, default='', verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∞(–ø–æ ID —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞)')
    name = models.CharField(max_length=40)
    description = models.TextField(blank=True, default='', verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')

    class Meta:
        verbose_name = '–°–µ—Ä–∏–∞–ª'
        verbose_name_plural = '–°–µ—Ä–∏–∞–ª—ã'

    def __str__(self):
        return self.name

#–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤—Å–µ –≤–∏–¥–µ–æ –≤ –±–æ—Ç–µ    
class Video(models.Model):
    series = models.ForeignKey(Series, on_delete = models.CASCADE, verbose_name='–ö–∞–∫–æ–º—É —Å–µ—Ä–∏–∞–ª—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')
    season = models.IntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞')
    number = models.IntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏')
    video_id = models.CharField(max_length=64, verbose_name='ID –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –∏–∑ —Ç–≥')
    name = models.CharField(max_length=40)

    class Meta:
        verbose_name = '–í–∏–¥–µ–æ'
        verbose_name_plural = '–í–∏–¥–µ–æ'

    def __str__(self):
        return self.name
    
#–≤—Å–µ –∫–∞–Ω–∞–ª—ã –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –±–æ—Ç    
class Channel(models.Model):
    id_channel = models.TextField(max_length=32)
    is_super_channel = models.BooleanField(default=False, verbose_name='–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª —Å—É–ø–µ—Ä –≤–∞–∂–Ω—ã–º –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ —Å–µ—Ä–∏–∞–ª–æ–≤')
    id_advertising = models.BooleanField(default=False, verbose_name='–ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
    name_channel = models.TextField(max_length=64, blank=True, null=True, default="channel")

    class Meta:
        verbose_name = '–ö–∞–Ω–∞–ª—ã'
        verbose_name_plural = '–ö–∞–Ω–∞–ª—ã'

    def __str__(self):
        if self.name_channel:
            return f'{self.name_channel} ({str(self.id_channel)})'
        else:
            return str(self.id_channel)


#—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
class ServiceUsage(models.Model):
    date = models.DateField(unique=True)
    count = models.IntegerField(default=0)
    
    class Meta:
        verbose_name = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        verbose_name_plural = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'





