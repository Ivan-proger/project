import time
from django.core.management.base import BaseCommand
from django.db.models import Count
from django.conf import settings
from bot1.models import *
from fuzzywuzzy import fuzz

from telebot import TeleBot, types


# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ—Ç–∞
bot = TeleBot(settings.BOT_TOKEN, threaded=False)

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
for key, value in settings.KEYBOARD_CONFIG.items():
    main_keyboard.add(types.KeyboardButton(value['title']))

cancel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
cancel_keyboard.add(types.KeyboardButton(settings.CANCEL_MESSAGE)) 

keyboard_next_video_list = types.InlineKeyboardMarkup()
button = types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂Ô∏è", callback_data='next_list')
keyboard_next_video_list.row(button)

#–í–´–ó–û–í –ú–ï–¢–û–î–ê –ù–ê–°–¢–†–ê–ò–í–ê–ï–¢–°–Ø –í settings.KEYBOARD_CONFIG
def list_mode(message, start_index=0, end_index=25):
    all_series = Series.objects.all()[start_index:end_index]
    data_strings = [f'‚îú ‚ñ∏<a href="t.me/{bot.get_me().username}?start={series.id}"> {series.name}</a> ‚óÇ' for series in all_series] # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–æ–≤ Series   
    final_string = "\r\n".join(data_strings) # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω –∫–æ–Ω–µ—á–Ω—ã–π string —Ñ–æ—Ä–º–∞—Ç
    count = Series.objects.count()
    if count > end_index:
        bot.send_message(message.chat.id, f'{settings.LIST_MESSAGE} {final_string} \r\n‚îÇ\r\n‚îî–ü–æ–∫–∞–∑–∞–Ω–æ  {end_index}/{count}', reply_markup=keyboard_next_video_list, parse_mode='HTML')
    else:
        keyboard_next_video_list_end = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("–≠—Ç–æ –≤–µ—Å—å –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω üëæ", callback_data='no_work_date')
        keyboard_next_video_list_end.row(button)
        bot.send_message(message.chat.id, settings.LIST_MESSAGE + final_string, reply_markup=keyboard_next_video_list_end, parse_mode='HTML')  


def search_series(message, query=None):
    if message.text != settings.CANCEL_MESSAGE:
        if query == None:
            query = message.text
        series = Series.objects.all()
        best_matches = []

        for s in series:
            similarity = fuzz.token_sort_ratio(s.name, query)
            if similarity > 70:                             #–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç
                best_matches.append((s, similarity))
            
        if best_matches:
            best_matches = sorted(best_matches, key=lambda x: x[1], reverse=True)
            obj = Series.objects.get(name=[match[0] for match in best_matches][0])

            video_counts = Video.objects.values('series_id', 'season').annotate(num_videos=Count('id'))
            text_msg_season = ''
            for video_count in video_counts:
                if Series.objects.get(id=video_count['series_id']).name == obj.name:
                    text_msg_season += f'- —Å–µ–∑–æ–Ω {video_count['season']}: –ö–æ–ª-–≤–æ —Å–µ—Ä–∏–π {video_count['num_videos']}\r\n'
            keyboard_start = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton("‚ú® –ü–µ—Ä–≤–∞—è —Å–µ—Ä–∏—è >", callback_data=f'start_watching-{obj.id}')
            keyboard_start.row(button)
            try:
                bot.send_photo(message.chat.id, obj.poster,
                            caption= str("‚ö°Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: " + obj.name + "\r\n" + 
                                        "–û–ø–∏—Å–∞–Ω–∏–µ: " + obj.description + "\r\n" + text_msg_season), reply_markup=keyboard_start)
            except:
                bot.send_message(message.chat.id, "‚ö°Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: " + obj.name + "\r\n" + 
                                                "–û–ø–∏—Å–∞–Ω–∏–µ: " + obj.description + "\r\n" + text_msg_season, reply_markup=keyboard_start)
            
            msg_video = bot.send_message(message.chat.id, settings.SEARCH_VIDEO_TEXT ,reply_markup=cancel_keyboard)
            bot.register_next_step_handler(msg_video, search_video, obj.id)

        else:
            if query.strip().isdigit():
                if len(query.split()) == 1:
                    try:
                        obj = Series.objects.get(id=int(query))
                        video_counts = Video.objects.values('series_id', 'season').annotate(num_videos=Count('id'))
                        text_msg_season = ''
                        for video_count in video_counts:
                            if Series.objects.get(id=video_count['series_id']).name == obj.name:
                                text_msg_season += f'- —Å–µ–∑–æ–Ω {video_count['season']}: {video_count['num_videos']} –≤–∏–¥–µ–æ \r\n'
                        keyboard_start = types.InlineKeyboardMarkup()
                        button = types.InlineKeyboardButton("–ü–µ—Ä–≤–∞—è —Å–µ—Ä–∏—è ‚ñ∂Ô∏è", callback_data=f'start_watching-{obj.id}')
                        keyboard_start.row(button)
                        try:
                            bot.send_photo(message.chat.id, obj.poster,
                                        caption= str("‚ö°Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: " + obj.name + "\r\n" + 
                                                    "–û–ø–∏—Å–∞–Ω–∏–µ: " + obj.description + "\r\n" + text_msg_season), reply_markup=keyboard_start)
                        except:
                            bot.send_message(message.chat.id, "‚ö°Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: " + obj.name + "\r\n" + 
                                                            "–û–ø–∏—Å–∞–Ω–∏–µ: " + obj.description + "\r\n" + text_msg_season, reply_markup=keyboard_start)
                        msg_video = bot.send_message(message.chat.id, settings.SEARCH_VIDEO_TEXT ,reply_markup=cancel_keyboard)
                        bot.register_next_step_handler(msg_video, search_video, obj.id)      
                    except:
                        msg = bot.send_message(message.chat.id, "üö´ –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
                        bot.register_next_step_handler(msg, handle_next_search_input)
                else:
                    msg = bot.send_message(message.chat.id, "üö´ –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
                    bot.register_next_step_handler(msg, handle_next_search_input)
            elif len(query.split('_')) == 3:
                text_list = query.split('_')
                text_list.pop(0)
                search_video(message, int(query.split('_')[0]), text_list)                              
            else:                           
                msg = bot.send_message(message.chat.id, "üö´ –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
                bot.register_next_step_handler(msg, handle_next_search_input)    
    else:
        bot.send_message(message.chat.id, "üö´ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_keyboard)

def handle_next_search_input(message):
    if message.text == settings.CANCEL_MESSAGE:
        bot.send_message(message.chat.id, "üö´ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_keyboard)
    else:
        search_series(message)

def search_mode(message):
    msg = bot.send_message(message.chat.id, "üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞.", reply_markup=cancel_keyboard)
    bot.register_next_step_handler(msg, search_series)

def search_video(message, series_id, text_list=None):  
    if text_list == None:
        text = message.text
        text_list = text.split()

    if message.text == settings.CANCEL_MESSAGE:
        bot.send_message(message.chat.id, "üö´ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_keyboard)
    else:
        if len(text_list) == 2 and all(part.isdigit() for part in text_list):
            try:
                obj_video = Video.objects.get(series_id=series_id,season=text_list[0] ,number=text_list[1])

                keyboard_next_video = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è", callback_data='next_video')
                keyboard_next_video.row(button)
                button_share = types.InlineKeyboardButton("üì¢ –ü–æ–¥–µ–ª–∏—Ç—Å—è", 
                    switch_inline_query=f'{settings.REFERRAL_MESSAGE} t.me/{bot.get_me().username}?start={series_id}_{obj_video.season}_{obj_video.number}')
                keyboard_next_video.row(button_share)

                bot.send_video(message.chat.id, obj_video.video_id,reply_markup=keyboard_next_video ,
                               caption=f'({obj_video.id}) –°–µ–∑–æ–Ω {obj_video.season}, c–µ—Ä–∏—è ‚Ññ{obj_video.number}, {obj_video.name}')
                bot.send_message(message.chat.id, settings.ENJOY_WATCHING , reply_markup=main_keyboard)
            except:
                bot.send_message(message.chat.id, settings.ERROR_VIDEO, reply_markup=main_keyboard)            
        else:
            for key, value in settings.KEYBOARD_CONFIG.items():
                if message.text == value['title']:
                    callback = value['callback']
                    globals()[callback](message)
                    return 
            if message.text.split()[0] == '/start' and len(message.text.split()) > 1:
                text = message.text.split()[1]
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                search_series(message, text)
            else:    
                bot.send_message(message.chat.id, settings.ERROR_VIDEO, reply_markup=main_keyboard)   

#----–¢–ò–ò–ü–ê –û–î–ò–ù –ú–ï–¢–û–î :/ ---

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def handle_video_button_click(call):
    if call.message.video:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫ –≤–∏–¥–µ–æ
        if call.data == 'next_video':
            obj = Video.objects.get(id=int(call.message.caption.split('(')[1].split(')')[0]))
            try:
                try:
                    obj1 = Video.objects.get(number=obj.number+1, season=obj.season, series_id = obj.series_id)
                    keyboard_next_video = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è", callback_data='next_video')
                    keyboard_next_video.row(button)
                    button_share = types.InlineKeyboardButton("üì¢ –ü–æ–¥–µ–ª–∏—Ç—Å—è", 
                        switch_inline_query=f'{settings.REFERRAL_MESSAGE} t.me/{bot.get_me().username}?start={obj1.series_id}_{obj1.season}_{obj1.number}')
                    keyboard_next_video.row(button_share)

                    bot.send_video(call.message.chat.id, obj1.video_id,reply_markup=keyboard_next_video ,caption=f'({obj1.id}) –°–µ–∑–æ–Ω {obj1.season}, c–µ—Ä–∏—è ‚Ññ{obj1.number}, {obj1.name}')
                    bot.send_message(call.message.chat.id, settings.ENJOY_WATCHING , reply_markup=main_keyboard)
                except:
                    obj1 = Video.objects.get(number=1, season=obj.season+1)
                    bot.send_video(call.message.chat.id, obj1.video_id,reply_markup=keyboard_next_video ,caption=obj1.name)
                    bot.send_message(call.message.chat.id, settings.ENJOY_WATCHING , reply_markup=main_keyboard)
            except:
                bot.send_message(call.message.chat.id,'–≠—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µoüò¢', reply_markup=main_keyboard)   
    if call.data == 'next_list':
        list1 = call.message.text.split('/')
        list1 = list1[0].split()
        start = list1[len(list1)-1]
        list_mode(call.message, int(start), int(start)+25)
    
    if call.data.split('-')[0] == 'start_watching':
        obj = Series.objects.get(id=int(call.data.split('-')[1]))
        search_video(call.message, int(call.data.split('-')[1]), text_list=['1', '1'])
    
    if call.data.split('-')[0] == 'add':
        if Users.objects.filter(external_id=int(call.data.split('-')[1]), is_superuser=True):
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤({str(Users.objects.count())}) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: (–í–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é –±—É–∫–≤—É –¥–ª—è –æ—Ç–º–µ–Ω—ã)")
            bot.register_next_step_handler(call.message, admin_range_user)
    if call.data == 'cancel':
        bot.delete_message(call.message.chat.id, call.message.message_id)
    
#–∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['admin'])
def handle_admin_command(message):
    if Users.objects.filter(external_id=message.from_user.id, is_superuser=True):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        button = types.InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", url=settings.ADMIN_PANEL_URL)
        button1 = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∫–ª–∞–º–∞–Ω—ã–π –ø–æ—Å—Ç", callback_data=f'add-{message.from_user.id}')
        button2 = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å ‚ùå", callback_data='cancel')
        keyboard.add(button, button1, button2)     
        bot.send_message(message.from_user.id, '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=keyboard)
    else:
        bot.send_message(message.from_user.id, f'–∑–∞ –ø–æ–∫—É–ø–∫–æ–π —Ä–µ–∫–ª–∞–º—ã > {settings.CONTACT_TS}', reply_markup=main_keyboard, parse_mode='HTML')
    bot.delete_message(message.chat.id, message.message_id)

def admin_range_user(message):
    if message.text.isdigit():
        bot.send_message(message.chat.id, f'–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: {message.text}, –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É <code>–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏ : url; </code>:', parse_mode='HTML')
        bot.register_next_step_handler(message,admin_keyboard_post, message.text)
    else:
        bot.send_message(message.from_user.id, settings.CANCEL_MESSAGE)
        handle_admin_command(message)

def admin_keyboard_post(message, range_send):
    keyboard = types.InlineKeyboardMarkup(row_width=1)  # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    if ':' in message.text:
        try:
            buttons_data = message.text.split('; ')  # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ
            for button in buttons_data:
                button_text, button_url = button.split(' : ')  # –¥–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É
                keyboard.add(types.InlineKeyboardButton(text=button_text, url=button_url.strip()))  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã(–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML —Ä–∞–∑–º–µ—Ç–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞): ')
                bot.register_next_step_handler(message, admin_confirmation, range_send, keyboard)# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        except:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–Ω—ã–π Url –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º, –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å—Å—ã–ª–∫–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚ùå')
    else:
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã: ')
        bot.register_next_step_handler(message, admin_confirmation, range_send, keyboard)

def admin_confirmation(message, range_send, keyboard):
    bot.send_message(message.chat.id, message.text, reply_markup=keyboard, parse_mode='HTML')
    bot.send_message(message.chat.id, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–±—Ä–∞–≤ "<code>Yes</code>"', parse_mode='HTML')
    bot.register_next_step_handler(message, admin_post, range_send, keyboard, message.text)

def admin_post(message, range_send, keyboard, text):
    if message.text == 'Yes' or message.text == 'yes':
        count = 0
        if int(range_send) > 0:
            random_records = list(Users.objects.all().order_by('?')[:int(range_send)])
            for obj in random_records:
                try:
                    time.sleep(0.2)
                    bot.send_message(str(obj.external_id), text, reply_markup=keyboard)
                    count += 1
                except:
                    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {str(obj.external_id)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ')
            bot.send_message(message.chat.id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
        else:
            list_us = list(Users.objects.all().order_by('?'))
            for obj in list_us:
                try:
                    time.sleep(0.2) #–î–ª—è –æ—Ç–ø—Ä–ø–∞–≤–∫–∏ –Ω–∞–¥–æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    bot.send_message(str(obj.external_id), text, reply_markup=keyboard)
                    count += 1
                except:
                    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {str(obj.external_id)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ')
            bot.send_message(message.chat.id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ(–≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º): {count} –ª—é–¥—è–º')
    else:
        bot.send_message(message.chat.id,'–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚ùå') 


class Command(BaseCommand):
    help = 'Telegram bot.'       

    def handle(self, *args, **kwargs):
        bot.enable_save_next_step_handlers(delay=2) # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        bot.load_next_step_handlers()	# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 

        #–¥–æ–±–∞–≤–ª—è–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤ –≤ –±–¥
        @bot.message_handler(commands=['start'])
        def start(message):
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            u, c = Users.objects.get_or_create(external_id = message.from_user.id, defaults={'name': message.from_user.username,})

            if " " in message.text:
                text = message.text.split()[1]
                search_series(message, text)
            else:
                bot.send_message(message.from_user.id, settings.MESSAGE_START, reply_markup=main_keyboard, parse_mode='HTML')

        @bot.message_handler(content_types=['text'])
        def work(message):
            for key, value in settings.KEYBOARD_CONFIG.items():
                if message.text == value['title']:
                    callback = value['callback']
                    globals()[callback](message)
                    return 


        #–î–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞ –∏ –≤–∏–¥–µ–æ –∫ –Ω–µ–º—É —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        @bot.channel_post_handler(content_types=['video', 'text', 'photo'])
        def addBDfilm(message):
            Channel.objects.get_or_create(id_channel=message.chat.id) #–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É
            id = Channel.objects.get(id_channel=message.chat.id) #–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞

            if id.is_super_channel:
                if message.content_type == "video":
                    id_video = message.video.file_id
                    message_text = message.caption    
                    if message_text:                        
                        message_text_list = message_text.split(' ; ')
                        s, _ = Series.objects.get_or_create(name = message_text_list[3])  
                                                           #–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ—á–∫–∞ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è c–µ—Ä–∏–∞–ª–∞(–∞–Ω–∏–º–µ) –≤ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ
                        video = Video.objects.create(
                            series = s,
                            video_id = id_video,
                            season = message_text_list[0], #–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞ –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω—è
                            number = message_text_list[1], #–≤—Ç–æ—Ä–∞—è —Å—Å—Ç—Ä–æ—á–∫–∞ –¥–æ " ; " –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏
                            name =  message_text_list[2],  #—Ç—Ä–µ—Ç—å—è  —Å—Ç—Ä–æ—á–∫–∞ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏
                        )
                        video.save()
                        bot.send_message(message.chat.id, f'–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! \r\n{video.name}, –∫ —Å–µ—Ä–∏–∞–ª—É: <code>{s.name}</code>', parse_mode='HTML')
                if message.content_type == "photo":
                    id_photo = message.photo[0].file_id
                    message_text_photo = message.caption
                    message_text_list = message_text_photo.split(' ; ')
                    s, cre = Series.objects.get_or_create(
                        name = message_text_list[0],          #–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞
                        defaults={
                          'poster':  id_photo,
                          'description': message_text_list[1] #–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ—á–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞
                        })
                    bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–∏–∞–ª \r\n–∏–º—è: <code>{s.name}</code> \r\n–û–ø–∏—Å–∞–Ω–∏–µ: {s.description}', parse_mode='HTML')
    
                    if not cre:
                        s.poster = id_photo
                        s.description = message_text_list[1]
                        s.save()
                        bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–∏–∞–ª \r\n–∏–º—è: <code>{s.name}</code> \r\n–û–ø–∏—Å–∞–Ω–∏–µ: {s.description}', parse_mode='HTML')

        bot.infinity_polling() 
        						


    