import os
import sys
import requests
import asyncio #–±–∞–∑–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
import logging #–¥–µ–±–∞–≥ —Ä–µ–∂–∏–º
import telebot #–±–∞–∑–∞ –±–æ—Ç–∞ –Ω–∞—à–µ–≥–æ
import matplotlib.pyplot as plt #–ø–æ—Å—Ç—Ä–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
import io #–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–∞–º–∏ 
import datetime # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º

from django.db.models import Q
from django.core.management.base import BaseCommand
from django.db.models import Count
from django.conf import settings
from asgiref.sync import sync_to_async # —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–∏ Djabgo ORM –∑–∞–ø—Ä–æ—Å–æ–≤

from bot1.models import * # –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π Django

from fuzzywuzzy import fuzz # –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –æ—à–∏–±–∫–∞–º–∏
from pathlib import Path # –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
from aiofiles import open as aio_open  # Import for async file operations
from telebot import asyncio_filters
from telebot.async_telebot import AsyncTeleBot, types, ExceptionHandler
from telebot.asyncio_storage import StateMemoryStorage # —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–∏–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from telebot.asyncio_handler_backends import State, StatesGroup # —Å–æ—Å—Ç–æ—è–Ω–∏—è


# –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–±–∞–≥–∞ –≤ settings.py
if settings.DEBUG:
    logger = telebot.logger
    telebot.logger.setLevel(logging.DEBUG)  # Outputs debug messages to console.
    class MyExceptionHandler(ExceptionHandler):
        async def handle(self, exception):
            logger.error(exception)

    bot = AsyncTeleBot(settings.BOT_TOKEN, state_storage=StateMemoryStorage(), exception_handler=MyExceptionHandler())
else:
    bot = AsyncTeleBot(settings.BOT_TOKEN, state_storage=StateMemoryStorage())

# FSM
class MyStates(StatesGroup):
    search_series = State()
       # admin states
    admin_keybord_add_set = State()
    admin_quantity_users = State()
    admin_text_add = State()
    admin_confirmation = State()
    admin_changing_variables = State()

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main_board = []
for key, value in settings.KEYBOARD_CONFIG.items():
    main_board.append(types.KeyboardButton(value['title']))
main_keyboard.add(*main_board)

cancel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
cancel_keyboard.add(types.KeyboardButton(settings.CANCEL_MESSAGE)) 

keyboard_next_video_list = types.InlineKeyboardMarkup()
button = types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂Ô∏è", callback_data='next_list')
keyboard_next_video_list.row(button)

# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def update_activity(external_id):
    try:
        user = await sync_to_async(lambda: Users.objects.get(external_id=external_id))()
        current_date = timezone.now()
        last_activity = user.last_activity 
        if last_activity.day != current_date.day: #–°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
                service_usage = await sync_to_async(lambda: ServiceUsage.objects.get(date=current_date))()
            except ServiceUsage.DoesNotExist:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 1
                service_usage = ServiceUsage(date=current_date, count=0)
            finally:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 1
                service_usage.count += 1
                await service_usage.asave()      
        await user.update_last_activity()
        if user.is_ban:
            return False       
        else:
            return True
    except:
        pass        

 # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
async def subscription_check(message):
    user = await sync_to_async(lambda: Users.objects.get(external_id=message.chat.id))()
    if user.is_subscription == True:    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        return True
    else:
        keyboard_ads = types.InlineKeyboardMarkup()
        channels = await sync_to_async(lambda: list(Channel.objects.filter(id_advertising=True)))()
        i = 0                    
        for channel in channels:
            i += 1
            keyboard_ads.add(types.InlineKeyboardButton(text=f"–ö–∞–Ω–∞–ª ‚Ññ{i}", url=f"https://t.me/{channel.name_channel}"))
        if i != 0:
            keyboard_ads.add(types.InlineKeyboardButton(text=f"‚ñ´ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ ‚ñ´", callback_data=f"check_subscription"))
            await bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Å—å", reply_markup=keyboard_ads)
        else:
            user.is_subscription = True
            await user.asave()
            return True
    return False

# —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–∏–∞–ª–æ–≤
async def all_items():
    return await sync_to_async(lambda: list(Series.objects.all()))()
async def send_page(message):
    if os.path.exists('ListMessageID'):
        with open('ListMessageID', "r") as f:
            file_id = f.readline().strip()
            msg = await bot.send_photo(message.chat.id, file_id)
    else:
        msg = await bot.send_message(message.chat.id, settings.LIST_MESSAGE, parse_mode="HTML")
    await send_page1(msg)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_page1(message, current_page=1):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    items = await all_items()
    start_index = (current_page - 1) * settings.ITEMS_PER_PAGE
    end_index = min(start_index + settings.ITEMS_PER_PAGE, len(items))
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for item in items[start_index:end_index]:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        keyboard.add(types.InlineKeyboardButton(text=f"{item.name}", callback_data=f"series_{item.id}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    prev_button = types.InlineKeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data=f"prevpage_{current_page}")
    next_button = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥‚ñ∂Ô∏è", callback_data=f"nextpage_{current_page}")
    page_info = types.InlineKeyboardButton(text=f"{current_page}/{await get_total_pages(len(items))}", callback_data="page_info")
    keyboard.row(prev_button, page_info, next_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id, reply_markup=keyboard)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
async def get_total_pages(total_items=None):
    if total_items == None:
        total_items = len(await all_items())
    return (total_items + settings.ITEMS_PER_PAGE - 1) // settings.ITEMS_PER_PAGE

async def search_mode(message):
    await bot.send_message(message.chat.id, "üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞.", reply_markup=cancel_keyboard)
    await bot.set_state(message.from_user.id, MyStates.search_series, message.chat.id)

# –ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–∞
async def search_obj_series(query):
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å - —ç—Ç–æ —á–∏—Å–ª–æ, –∏—â–µ–º –ø–æ id
    if str(query).isdigit():
        series = await sync_to_async(lambda: list(Series.objects.filter(id=int(query)).all()))()
        if series:
            return series[0]
    else:
        # –ò–Ω–∞—á–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fuzzywuzzy –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
        series = await sync_to_async(lambda: list(Series.objects.all()))()
    if not series:
        return None  # –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω 
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—à–µ–π —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ä–∞–≤–Ω–æ–π 50
    filtered_series = [item for item in series if fuzz.ratio(item.name, query) >= 70]
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    
    if len(filtered_series) == 1:
        return filtered_series[0]
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º —Å—Ö–æ–∂–µ—Å—Ç–∏
    best_match = max(filtered_series, key=lambda x: fuzz.ratio(x.name, query), default=None)
    return best_match   

# –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–º–æ—â—å
async def help(message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.send_message(message.chat.id, settings.COMMAND_HELP)   
    await bot.delete_state(message.from_user.id, message.chat.id)

class Command(BaseCommand):
    help = 'Async Telegram bot.'       

    def handle(self, *args, **kwargs):
        print("\n--- Bot runing ---\n")

        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        @bot.callback_query_handler(func=lambda call: True)
        async def handle_button_click(call):
            try:
                if await update_activity(call.message.chat.id): # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if call.data == 'next_list':
                        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
                        list1 = call.message.text.split('/')
                        list1 = list1[0].split()
                        start = list1[len(list1)-1]
                        await list_mode(call.message, int(start), int(start)+25)

                    if call.data.split('-')[0] == 'start_watching': # –ü–µ—Ä–≤–∞—è —Å–µ—Ä–∏—è –ø–æ–¥ —Å–µ—Ä–∏–∞–ª–æ–º
                        obj = await sync_to_async(lambda: Series.objects.get(id=int(call.data.split('-')[1])))()
                        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
                        await search_video(call.message, id_series=obj.id, season=1, number=1)
                    if call.data.split("_")[0] == 'season':
                        id_series = call.data.split("_")[1]
                        number_season = call.data.split("_")[2]
                        number_video = int(call.data.split("_")[3])
                        keyboard = types.InlineKeyboardMarkup(row_width=4)
                        keyboard.row(types.InlineKeyboardButton('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É —Å–µ—Ä–∏—é:', callback_data='None'))
                        list_video = []
                        for i in range(1, number_video+1):
                            list_video.append(types.InlineKeyboardButton(i, callback_data=f'video_{id_series}_{number_season}_{i}'))
                        keyboard.add(*list_video)
                        keyboard.row(types.InlineKeyboardButton('‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=f'backSeries_{id_series}'))
                        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)
                    if call.data.split("_")[0] == 'video':
                        obj = await sync_to_async(lambda: Series.objects.get(id=int(call.data.split('_')[1])))()
                        number_season = call.data.split("_")[2]
                        number_video = call.data.split("_")[3]
                        await search_video(call.message, id_series=obj.id, season=number_season, number=number_video)
                    if call.data.split('_')[0] == 'backSeries':
                        obj = await search_obj_series(call.data.split('_')[1])
                        video_counts = await sync_to_async(lambda: list(Video.objects.values('series_id', 'season').annotate(num_videos=Count('id'))))()
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        season_row = []
                        for video_count in video_counts: 
                            if await sync_to_async(lambda: Series.objects.get(id=video_count['series_id']).name)() == obj.name:
                                season_row.append(types.InlineKeyboardButton(f'–°–µ–∑–æ–Ω {video_count['season']}', callback_data=f'season_{obj.id}_{video_count['season']}_{video_count['num_videos']}'))
                        keyboard.add(*season_row)
                        keyboard.row(types.InlineKeyboardButton('üì¢ –ü–æ–¥–µ–ª–∏—Ç—Å—è', url=f'https://t.me/share/url?url=t.me/{(await bot.get_me()).username}?start=Serias_{obj.id}'))
                        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)                                           

                    if call.message.video:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫ –≤–∏–¥–µ–æ
                        if call.data.split('-')[0] == 'next_video':
                            if await subscription_check(call.message):
                                inline_keyboard = call.message.reply_markup
                                if inline_keyboard.keyboard:
                                    if inline_keyboard.keyboard[0]:
                                        inline_keyboard.keyboard[0].pop(0)  # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É
                                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                                        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=inline_keyboard)
                                try:
                                    video = await sync_to_async(lambda: Video.objects.get(id=call.data.split('-')[1]))()
                                    if await sync_to_async(lambda: list(Video.objects.filter(series_id=video.series_id, season=video.season, number=video.number+1).all()))():
                                        await search_video(call.message, id_series=video.series_id, season=video.season, number=video.number+1)
                                    elif await sync_to_async(lambda: list(Video.objects.filter(series_id=video.series_id, season=video.season+1, number=1).all()))():
                                        await search_video(call.message, id_series=video.series_id, season=video.season+1, number=1)
                                    else:
                                        await bot.send_message(call.message.chat.id,'–≠—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µoüò¢', reply_markup=main_keyboard)
                                except:
                                    await bot.send_message(call.message.chat.id,'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ü§¨', reply_markup=main_keyboard)

                    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª—å–∫–∏
                    if call.data == 'cancel':
                        await bot.delete_message(call.message.chat.id, call.message.message_id)
                    # –ó–∞–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç—ã
                    if call.data == 'cancelState':
                        await bot.delete_message(call.message.chat.id, call.message.message_id)
                        await bot.delete_state(call.message.chat.id, call.message.chat.id)
                    if call.data.split('-')[0] == 'add':
                        if await sync_to_async(lambda: list(Users.objects.filter(external_id=int(call.data.split('-')[1]), is_superuser=True).all()))():
                            await bot.delete_message(call.message.chat.id, call.message.message_id)
                            await bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞–∫: \r\n<code>–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏ - url </code>:', reply_markup=cancel_keyboard, parse_mode='HTML')
                            await bot.set_state(call.message.chat.id, MyStates.admin_keybord_add_set, call.message.chat.id)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                    if call.data.startswith("prevpage"):
                        current_page = int(call.data.split("_")[1])
                        if int(current_page) > 1:
                            await send_page1(call.message, current_page - 1)
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                    elif call.data.startswith("nextpage"):
                        current_page = int(call.data.split("_")[1])
                        if int(current_page) < await get_total_pages():
                            await send_page1(call.message, current_page + 1)
                    if call.data.startswith("series"):
                        await bot.delete_message(call.message.chat.id, call.message.id)
                        await search_series(call.message, await search_obj_series(call.data.split("_")[1]))

                    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
                    if call.data == 'check_subscription':
                        user = await sync_to_async(lambda: Users.objects.get(external_id=call.message.chat.id))()
                        channels = await sync_to_async(lambda: list(Channel.objects.filter(id_advertising=True)))()
                        i=0
                        for channel in channels:
                            x = await bot.get_chat_member(channel.id_channel, user.external_id)
                            if x.status == "member" or x.status == "creator" or x.status == "administrator":
                                i += 1
                        if i == len(channels) or user.is_superuser == True:
                            user.is_subscription = True
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏—à–µ–¥—à–∏—Ö –∫ –∫–∞–Ω–∞–ª—É —é–∑–µ—Ä–æ–≤
                            channels = await sync_to_async(lambda: list(Channel.objects.filter(id_advertising=True)))()
                            for channel in channels:
                                channel.subscribers_added += 1
                                await channel.asave()
                            await bot.delete_message(call.message.chat.id, call.message.id)
                            await bot.send_message(call.message.chat.id, "–í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã‚úÖ, –Ω–∞–∂–∏–º—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!ü§ó")
                            await user.asave()
                        else:
                            await bot.answer_callback_query(callback_query_id=call.id, text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å‚ùå')

                    # –æ–±–Ω—É–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if call.data == 'reset_is_subscription':
                        await bot.delete_message(call.message.chat.id, call.message.id)
                        users = await sync_to_async(lambda: list(Users.objects.all()))()
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è is_subscription –Ω–∞ False –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                        for user in users:
                            user.is_subscription = False
                            await user.asave()
                        await bot.send_message(call.message.chat.id, "‚úÖ–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!")

                    # –°–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
                    if call.data == 'graf': 
                        await bot.delete_message(call.message.chat.id, call.message.id)
                        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ 31 –¥–µ–Ω—å–º–∏ –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
                        start_date = datetime.date.today() - datetime.timedelta(days=31)
                        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞—Ç—ã –∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        all_dates = await sync_to_async(lambda: list(ServiceUsage.objects.filter(date__gte=start_date).values_list('date', flat=True)))()
                        all_values = await sync_to_async(lambda: list(ServiceUsage.objects.filter(date__gte=start_date).values_list('count', flat=True)))()
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–µ–Ω—å-–º–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
                        short_dates = [date.strftime('%d-%m') for date in all_dates]
                        plt.bar(range(len(all_values)), all_values, edgecolor='black', color='pink')
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–∞—Ç—ã –Ω–∞ –æ—Å–∏ X
                        plt.xticks(range(len(all_values)), short_dates, rotation=45)
                        plt.grid(axis='y', linestyle='--', linewidth=1)
                        plt.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∑–∞ 31 –¥–µ–Ω—å:")
                        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                        plt.gca().set_facecolor('#D3D3D3')  
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                        buffer = io.BytesIO()
                        plt.savefig(buffer, format='png')
                        buffer.seek(0) #—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞ —á—Ç–æ–±—ã –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –≤ —Ç–≥

                        await bot.send_photo(call.message.chat.id, photo=buffer, caption="üîù–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ 31 –¥–µ–Ω—åüîù")
                        plt.close()
                        buffer.close()
                    if call.data == 'fail_txt_bd':
                        await bot.delete_message(call.message.chat.id, call.message.id)
                        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
                        async def write_file(users, filename):
                            async with aio_open(filename, 'w') as file:
                                async for user in users:
                                    await file.write(f'{user.external_id}\n')
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                        async def send_file(bot, chat_id, filename):
                            with open(filename, 'rb') as file:
                                await bot.send_document(chat_id, file, caption=f'–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({timezone.now().strftime("%Y-%m-%d %H:%M:%S")})')

                        users = await sync_to_async(lambda: Users.objects.all())()
                        filename = 'users.txt'
                        await write_file(users, filename)
                        await send_file(bot, call.message.chat.id, filename)
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–∞/–Ω–µ—Ç
                    if call.data == 'CHANGE_DESIGN':
                        await bot.delete_message(call.message.chat.id, call.message.id)
                        if settings.CHANGE_DESIGN:
                            settings.CHANGE_DESIGN = False
                        else:
                            settings.CHANGE_DESIGN = True
                        await handle_admin_command(call.message, True)
                    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω–∏–µ
                    if call.data == 'tex_work':
                        await bot.delete_message(call.message.chat.id, call.message.id)
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        buttonx = types.InlineKeyboardButton(" –Ω–µ—Ç ‚ùå ", callback_data='cancel')
                        buttonY = types.InlineKeyboardButton(" –¥–∞, —Ç–æ—á–Ω–æ ‚úÖ", callback_data='tex_working')
                        keyboard.add(buttonY, buttonx)                
                        await bot.send_message(call.message.chat.id, "üÜò –í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω—ã???\r\n<b>–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—é –±–æ—Ç–∞</b>", reply_markup=keyboard, parse_mode='HTML')
                    if call.data == 'tex_working':
                        await bot.delete_message(call.message.chat.id, call.message.id)
                        await bot.send_message(call.message.chat.id, "<b>–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç! \r\n#—Ç–µ—Ö—Ä–∞–±–æ—Ç—ã</b>", parse_mode='HTML')
                        # –ó–∞–ø—É—Å–∫ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã
                        os.system(settings.APPEAL_PYTHON+" manage.py techBot")
                        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
                        sys.exit()
                    if call.data == 'text_const':
                        await bot.delete_message(call.message.chat.id, call.message.id)
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        variables_list={'settings.MESSAGE_START' : '–°–æ–æ–±—â–µ–Ω–∏–µ /start' , 
                                        'settings.CONTACT_TS' : '–ö–æ–Ω—Ç–∞–∫—Ç —Ç–µ—Ö.–ø–æ–¥.',
                                        'settings.COMMAND_HELP' : '–û—Ç–≤–µ—Ç –Ω–∞ /help',
                                        }
                        for key, value in variables_list.items():
                            keyboard.add(types.InlineKeyboardButton(value, callback_data=f'const-{key}'))
                        keyboard.add(types.InlineKeyboardButton(" -- –ó–∞–∫—Ä—ã—Ç—å ‚ùå -- ", callback_data='cancel'))
                        await bot.send_message(call.message.chat.id, "|<b> –ë—É–¥—å—Ç–µ –∫—Ä–∞–π–Ω–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –∏–∑–º–µ–Ω—è—è —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã! </b>|", reply_markup=keyboard, parse_mode='HTML')
                    if call.data.startswith("const"):
                        key = call.data.split('-')[1]
                        keyboard = types.InlineKeyboardMarkup()
                        buttontext = types.InlineKeyboardButton(" –í—ã —Ö–æ—Ç–µ—Ç–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ? ", callback_data='None')
                        buttonx = types.InlineKeyboardButton(" –Ω–µ—Ç ‚ùå ", callback_data='cancel')
                        buttonY = types.InlineKeyboardButton(" –¥–∞, —Ç–æ—á–Ω–æ ‚úÖ", callback_data=f'change-{key}')
                        keyboard.add(buttontext) 
                        keyboard.row(buttonY, buttonx)                    
                        await bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π <code>{key.split('.')[1]}</code>: \r\n{str(eval(key))}",reply_markup=keyboard, parse_mode='HTML')
                    if call.data.split('-')[0] == 'change':
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        keyboard.add(types.InlineKeyboardButton(f"–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å‚ùå", callback_data='cancelState'))
                        await bot.set_state(call.message.chat.id, MyStates.admin_changing_variables, call.message.chat.id)
                        async with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
                            data['changing_variable'] = call.data.split('-')[1]
                        await bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=keyboard)
                        await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ', reply_markup=cancel_keyboard)
                else:
                    await bot.send_message(call.message.chat.id, '‚õî–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É\r\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –µ—â–µ —Ä–∞–∑</b> ', reply_markup=main_keyboard, parse_mode='html')
            except Exception as e:
                if settings.DEBUG:
                    logger.error(f'\n\n{str(e)}\n\n')
                else:
                    await bot.send_message(call.message.chat.id, f'üò® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –≤–≤–µ–¥–∏—Ç–µ <code>/start</code>', parse_mode='HTML')
                    

#-\-\-\-\-\-\-\-\--\-\-\-\-\-\-\-\-\-\--\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--\-\-\-\-\-\-\- –∫–æ–Ω–µ—Ü –ª–æ–≥–∏–≥–∏–∫–∏ –∫–æ–ª–±–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π


        #–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        @bot.message_handler(state="*", text=asyncio_filters.TextFilter(equals=settings.CANCEL_MESSAGE))
        async def any_state(message):
            await bot.delete_message(message.chat.id, message.id)
            await bot.send_message(message.chat.id, settings.CANCEL_MESSAGE, reply_markup=main_keyboard)
            await bot.delete_state(message.from_user.id, message.chat.id)

        @bot.message_handler(commands=['help'])   # –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
        async def help_func(message):
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await bot.send_message(message.chat.id, settings.COMMAND_HELP)

        @bot.message_handler(commands=['start'])
        async def start(message):
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –ª–∏–±–æ –±–µ–∑ –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç 
            async def send_start_message(message):
                if os.path.exists('StartMessageID'):
                    with open('StartMessageID', "r") as f:
                        file_id = f.readline().strip()
                        await bot.send_photo(message.chat.id, file_id, settings.MESSAGE_START, reply_markup=main_keyboard, parse_mode="HTML")
                else:
                    await bot.send_message(message.chat.id, settings.MESSAGE_START, reply_markup=main_keyboard, parse_mode="HTML")

            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

            user, created = await sync_to_async(Users.objects.get_or_create)(
                external_id=message.from_user.id,
                defaults={'name': message.from_user.username,}
            )
    
            if " " in message.text:
                # –≤—ã–¥–∞—á–∞ —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ —Å–µ—Ä–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ /start 
                text = message.text.split()[1]
                # –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
                if text.split('_')[0] == 'ref':
                    if not user.ref_code:
                        code = text.split('_')[1]
                        user.ref_code = code
                        await user.asave()
                        try:
                            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                            code_usage = await sync_to_async(lambda: StatisticRef.objects.get(name_code=code))()
                        except StatisticRef.DoesNotExist:
                            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 1
                            code_usage = StatisticRef(name_code=code, user_sdded=1)
                            await code_usage.asave()
                        else:
                            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 1
                            code_usage.count += 1
                            await code_usage.asave()
                            await bot.send_message(message.chat.id, "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—Å—è —Å –Ω–∞—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!", reply_markup=main_keyboard)
                            await send_start_message(message)
                    else:
                        await bot.send_message(message.chat.id, f"–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ - <code>{user.ref_code}</code>", parse_mode='HTML')
                else:
                    if text.split('_')[1].isdigit and not len(text.split('_')) == 3 and text.split('_')[0] == 'Serias':
                        await search_series(message, await search_obj_series(int(text.split('_')[1])))
                    elif len(text.split('_')) == 3:
                        text_list = text.split('_')
                        await search_video(message, id_series=int(text_list[0]), season=int(text_list[1]), number=int(text_list[2]))
            else:
                if created: 
                    # –°–æ–∑–¥–∞–µ–º –ª–∏–±–æ –≤–æ–∑—Ä–∞—â–∞–µ–º –Ω–∞ —Ç–æ —Å–∫–æ–ª—å–∫–æ–ø —Ä–∏—à–ª–æ –∫ –±–æ—Ç—É –ø—Ä–æ—Å—Ç–æ –æ—Ç –∫–æ–º–∞–Ω–¥—ã /start
                    statistic_code, _ = await sync_to_async(lambda: StatisticRef.objects.get_or_create(name_code='local'))()
                    statistic_code.user_sdded += 1
                    await statistic_code.asave()  
                    # –°—Ç–∞–≤—å —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É —Ç–æ–≥–æ —á—Ç–æ —é–∑–µ—Ä –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞ –±–µ–∑ —Ä–µ—Ñ–∫–∏
                    user.ref_code = 'local'
                    await user.asave()  

                    await bot.send_message(message.chat.id, "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—Å—è —Å –Ω–∞—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!", reply_markup=main_keyboard)
                    await send_start_message(message)
                else:
                    await send_start_message(message) 
        
        # –§—É–Ω–∫—Ü–∏–∏—è –∞–¥–º–∏–Ω–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç 
        @bot.message_handler(state=MyStates.admin_changing_variables)
        async def sawp_text(message):
            if message.text.casefold() != '–æ—Ç–º–µ–Ω–∞':
                async with bot.retrieve_data(message.chat.id, message.chat.id) as data:
                    key = data['changing_variable']
                    text = message.text
                    exec(f"{key} = '''\n{text}\n'''")
                    with open(f"{key.split('.')[1]}.txt", "w", encoding="utf-8") as f:
                        f.write(text)
                    await bot.send_message(message.chat.id, f"–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π <code>{key.split('.')[1]}</code>: \r\n{str(eval(key))}",parse_mode='HTML',reply_markup=main_keyboard)
                await bot.delete_message(message.chat.id, message.id)
                await bot.delete_state(message.from_user.id, message.chat.id)
            else:
                await any_state(message)

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞  ---- core —Å–æ—Å—Ç–æ–≤–ª—è—é—â–∞—è
        @bot.message_handler(state=MyStates.search_series)
        async def search_series(message, obj=None):
            if await update_activity(message.chat.id): # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏          
                if not obj:
                    obj = await search_obj_series(message.text)
                
                if obj:
                    video_counts = await sync_to_async(lambda: list(Video.objects.values('series_id', 'season').annotate(num_videos=Count('id'))))()
                            
                    text_msg_season = ''
                    keyboard_start = types.InlineKeyboardMarkup(row_width=2)
                    season_row = []
                    for video_count in video_counts: 
                        if await sync_to_async(lambda: Series.objects.get(id=video_count['series_id']).name)() == obj.name:
                            text_msg_season += f"   - C–µ–∑–æ–Ω {video_count['season']}: —Å–µ—Ä–∏–π {video_count['num_videos']}\r\n"
                            season_row.append(types.InlineKeyboardButton(f'–°–µ–∑–æ–Ω {video_count['season']}', callback_data=f'season_{obj.id}_{video_count['season']}_{video_count['num_videos']}'))
                    if len(season_row) == 1:
                        video = await sync_to_async(lambda: list(Video.objects.filter(series_id=obj.id)))()
                        keyboard_start = types.InlineKeyboardMarkup(row_width=4)
                        keyboard_start.row(types.InlineKeyboardButton('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É —Å–µ—Ä–∏—é:', callback_data='None'))
                        list_video = []
                        for i in video:
                            list_video.append(types.InlineKeyboardButton(str(i.number), callback_data=f'video_{str(i.series_id)}_{str(i.season)}_{str(i.number)}'))
                        keyboard_start.add(*list_video)
                    else:
                        button = types.InlineKeyboardButton("‚ú® –°–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é >", callback_data=f'start_watching-{obj.id}')
                        keyboard_start.row(button)
                        keyboard_start.add(*season_row)
                    keyboard_start.row(types.InlineKeyboardButton('üì¢ –ü–æ–¥–µ–ª–∏—Ç—Å—è', url=f'https://t.me/share/url?url=t.me/{(await bot.get_me()).username}?start=Serias_{obj.id}'))

                    try:
                        await bot.send_photo(message.chat.id, obj.poster,
                                    caption= str(f"‚ö°Ô∏è <b>{obj.name}</b>\r\n<i>{obj.description}</i>\r\n\r\n{text_msg_season}"), reply_markup=keyboard_start, parse_mode='HTML')
                    except:
                        await bot.send_message(message.chat.id, f"‚ö°Ô∏è <b>{obj.name}</b>\r\n<i>{obj.description}</i>\r\n{text_msg_season}", reply_markup=keyboard_start, parse_mode='HTML')

                        
                else:
                    await bot.send_message(message.chat.id, settings.ERROR_VIDEO)  
            else:
                await bot.delete_state(message.from_user.id, message.chat.id)
                await bot.send_message(message.chat.id, '‚õî–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É\r\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –µ—â–µ —Ä–∞–∑</b> ', reply_markup=main_keyboard, parse_mode='html')

        # –ü–æ–∏—Å–∫ –≤–∏–¥–æ –∫–∞–∫ –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∞–ª–∞ —Ç–∞–∫ –∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–¥–µ —É–≥–æ–¥–Ω–æ
        async def search_video(message, id_series, season=None, number=None):
            if await update_activity(message.chat.id): # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 
                if not season and not number:
                    list_text = message.text.split()
                    if len(list_text) == 2:
                        season = list_text[0]
                        number = list_text[1]
                    else:
                        await bot.send_message(message.chat.id, settings.ERROR_VIDEO)
                        return
                try:
                    obj_video = await sync_to_async(lambda: Video.objects.get(series_id=id_series,season=season ,number=number))()

                    keyboard_next_video = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è ‚ñ∂Ô∏è", callback_data=f'next_video-{obj_video.id}')
                    keyboard_next_video.row(button)
                    button_share = types.InlineKeyboardButton("üì¢ –ü–æ–¥–µ–ª–∏—Ç—Å—è", 
                        url=f'https://t.me/share/url?url=t.me/{(await bot.get_me()).username}?start={id_series}_{obj_video.season}_{obj_video.number}') #—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–µ–ª–∏—Ç—Å—è
                    keyboard_next_video.row(button_share)

                    await bot.send_video(message.chat.id, obj_video.video_id,reply_markup=keyboard_next_video ,
                                    caption=f'üì∫ <b>{obj_video.name}</b> \r\n  –°–µ–∑–æ–Ω {obj_video.season}, c–µ—Ä–∏—è ‚Ññ{obj_video.number}', supports_streaming=True, parse_mode="html")
                    await bot.send_message(message.chat.id, settings.ENJOY_WATCHING , reply_markup=main_keyboard)
                    await bot.delete_state(message.from_user.id, message.chat.id)
                except:
                    await bot.send_message(message.chat.id, settings.ERROR_VIDEO)
            else:
                await bot.delete_state(message.from_user.id, message.chat.id)
                await bot.send_message(message.chat.id, '‚õî–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É\r\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –µ—â–µ —Ä–∞–∑</b> ', reply_markup=main_keyboard, parse_mode='html')

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ /list
        @bot.message_handler(commands=['list'])
        async def list_mode(message, start_index=0, end_index=45): 
            if await update_activity(message.chat.id): # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                async def objects_Series(start_index, end_index):    
                    return await sync_to_async(lambda: list(Series.objects.all()[start_index:end_index]))()
                all_series = await objects_Series(start_index, end_index)

                async def generate_string(series, bot):
                    if len(series.description.split()) <= 1:
                        return f'  ‚ñ∏<a href="t.me/{(await bot.get_me()).username}?start=Serias_{series.id}"> {series.name}</a> ‚óÇ'
                    elif len(series.description) < 75:
                        return f'  ‚ñ∏<a href="t.me/{(await bot.get_me()).username}?start=Serias_{series.id}"> {series.name}</a> ‚óÇ ‚Äî  <i>{series.description}</i>'
                    else:
                        return f'  ‚ñ∏<a href="t.me/{(await bot.get_me()).username}?start=Serias_{series.id}"> {series.name}</a> ‚óÇ ‚Äî <i>{series.description[:75]}...</i>'
                data_strings = await asyncio.gather(*[generate_string(series, bot) for series in all_series])

                final_string = "\r\n".join(data_strings)

                async def count_Series():
                    count = await sync_to_async(Series.objects.count)()
                    return count
                count = await count_Series()

                if count > end_index:
                    await bot.send_message(message.chat.id, f'{settings.LIST_MESSAGE} {final_string} \r\n‚îÇ\r\n‚îî–ü–æ–∫–∞–∑–∞–Ω–æ  {end_index}/{count}', reply_markup=keyboard_next_video_list, parse_mode='HTML')
                else:
                    keyboard_next_video_list_end = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton("–≠—Ç–æ –≤–µ—Å—å –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω üëæ", callback_data='no_work_date')
                    keyboard_next_video_list_end.row(button)
                    await bot.send_message(message.chat.id, settings.LIST_MESSAGE + final_string, reply_markup=keyboard_next_video_list_end, parse_mode='HTML')
            else:
                await bot.send_message(message.chat.id, '‚õî–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É\r\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –µ—â–µ —Ä–∞–∑</b> ', reply_markup=main_keyboard, parse_mode='html')
            await bot.delete_message(message.chat.id, message.id)


        # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        @bot.message_handler(commands=['admin'])
        async def handle_admin_command(message, red=False):
            if await sync_to_async(lambda: list(Users.objects.filter(external_id=message.from_user.id, is_superuser=True).all()))() or red:
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                button = types.InlineKeyboardButton("üíå–í–µ–± –ø–∞–Ω–µ–ª—å", url=settings.ADMIN_PANEL_URL)
                button1 = types.InlineKeyboardButton("‚úèÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∫–ª–∞–º–∞–Ω—ã–π –ø–æ—Å—Ç", callback_data=f'add-{message.from_user.id}')
                button2 = types.InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f'reset_is_subscription')
                button3 = types.InlineKeyboardButton("üìä–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —é–∑–µ—Ä–æ–≤", callback_data=f'graf')
                button4 = types.InlineKeyboardButton("üóÇ–í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É.txt Telegram ID", callback_data=f'fail_txt_bd')
                if settings.CHANGE_DESIGN:
                    button5 = types.InlineKeyboardButton("üé®–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", callback_data=f'CHANGE_DESIGN')
                else:
                    button5 = types.InlineKeyboardButton("üé®–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", callback_data=f'CHANGE_DESIGN')
                button6 = types.InlineKeyboardButton("üßë‚Äçüíª–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–µ—Ö. —Ä–∞–±–æ—Ç", callback_data=f'tex_work')
                button7 = types.InlineKeyboardButton("üëæ–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç", callback_data=f'text_const')
                buttonx = types.InlineKeyboardButton(" -- –ó–∞–∫—Ä—ã—Ç—å ‚ùå -- ", callback_data='cancel')
                keyboard.add(button, button1, button2, button3, button4, button5, button6,button7 ,buttonx)     
                await bot.send_message(message.chat.id, 'üíåüíåüíå--–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å--üíåüíåüíå', reply_markup=keyboard)
            else:
                await bot.send_message(message.from_user.id, f'–ó–∞ –ø–æ–∫—É–ø–∫–æ–π —Ä–µ–∫–ª–∞–º—ã > {settings.CONTACT_TS}', reply_markup=main_keyboard, parse_mode='HTML')
            if not red:
                await bot.delete_message(message.chat.id, message.message_id)
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
        @bot.message_handler(state=MyStates.admin_keybord_add_set)
        async def admin_keybord_add(message):
            keyboard = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            if message.text:
                try:
                    for button_text in message.text.split('\n'):
                        if ';' in button_text:
                            current_row = []
                            button_texts = button_text.split(' ; ')
                            for button_text in button_texts:
                                button_name, button_url = button_text.split(' - ')
                                current_row.append(types.InlineKeyboardButton(text=button_name, url=button_url))
                            keyboard.row(*current_row)
                        else:
                            button_name, button_url = button_text.split(' - ')
                            keyboard.add(types.InlineKeyboardButton(text=button_name, url=button_url))
                    
                        print(button_url.strip())
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç(–≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) —Ä–µ–∫–ª–∞–º—ã(–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML —Ä–∞–∑–º–µ—Ç–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞): ')
                    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                        data['admin_keyboard_add'] = keyboard
                    await bot.set_state(message.from_user.id, MyStates.admin_text_add, message.chat.id)
                except:
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–Ω—ã–π Url –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º, –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å—Å—ã–ª–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: ')
            else:
                await bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\r\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç(–≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) —Ä–µ–∫–ª–∞–º—ã: ")
                async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['admin_keyboard_add'] = keyboard
                await bot.set_state(message.from_user.id, MyStates.admin_text_add, message.chat.id)            

        @bot.message_handler(content_types=['video', 'text', 'photo'], state=MyStates.admin_text_add)
        async def admin_text_add_only_text(message):
            async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['admin_message_id'] = message.id
            await bot.set_state(message.from_user.id, MyStates.admin_quantity_users, message.chat.id)
            await bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! \r\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ª–∏–±–æ –ª—é–±—É—é –±—É–∫–≤—É, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Å–µ–º.')

        @bot.message_handler(state=MyStates.admin_quantity_users)
        async def admin_quantity_users_add(message):
            if str(message.text).isdigit():
                async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['admin_quantity_users'] = message.text
                await bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ! \r\n–û—Ç–ø—Ä–∞–≤–∏–º {message.text} —á–µ–ª.')
            else:
                async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['admin_quantity_users'] = 0
                await bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–Ω–Ω–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º –±–æ—Ç–∞.')
            try:
                await bot.set_state(message.from_user.id, MyStates.admin_confirmation, message.chat.id)
                async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    await bot.copy_message(message.chat.id, message.chat.id, data['admin_message_id'], reply_markup=data['admin_keyboard_add']) 
                await bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ? \r\n–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ `<code>Yes</code>`: ', parse_mode="HTML")     
            except Exception as e:
                 await bot.send_message(message.chat.id, f'‚õî‚õî‚õî –û—à–∏–±–∫–∞: \r\n<code>{e}</code>', parse_mode="HTML")
                 await any_state(message)

        @bot.message_handler(state=MyStates.admin_confirmation)
        async def admin_confirmation_add(message):
            if message.text == 'Yes' or message.text == 'yes':
                await bot.send_message(message.chat.id, '–∑–∞–ø—É—Å–∫–∞—é —à–∞—Ä–º–∞–Ω–∫—É', reply_markup=main_keyboard)
                async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    if data['admin_quantity_users'] != 0:
                        records = await sync_to_async(lambda: list(Users.objects.all().order_by('?')[:int(data['admin_quantity_users'])]))() # O–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä—ç–Ω–¥–∂ —Ä–∞—Å—Å—ã–ª–∫–∏
                    else:
                        records = await sync_to_async(lambda: list(Users.objects.all().order_by('?')))()
                    count = 0
                    for obj in records:
                        try:
                            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ 
                            await bot.copy_message(str(obj.external_id), message.chat.id, data['admin_message_id'], reply_markup=data['admin_keyboard_add'])
                            count += 1
                        except:
                            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {str(obj.external_id)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ')
                            await obj.adelete()
                    await bot.send_message(message.chat.id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')                        
            else:       
                await bot.delete_message(message.chat.id, message.id)
                await bot.send_message(message.chat.id, '–í—Å–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. ', reply_markup=main_keyboard)
                await bot.delete_state(message.from_user.id, message.chat.id)               


# –î–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞ –∏ –≤–∏–¥–µ–æ –∫ –Ω–µ–º—É —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ---- ----- ----- ----- -----
        @bot.channel_post_handler(content_types=['video', 'text', 'photo'])
        async def addBDfilm(message):
            chat_info = await bot.get_chat(message.chat.id)
            await sync_to_async(Channel.objects.get_or_create)(
                defaults={'name_channel': chat_info.username},
                id_channel=message.chat.id,) #–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É
            id = await sync_to_async(lambda: Channel.objects.get(id_channel=message.chat.id))() # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞

            if id.is_super_channel:
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ –±–¥
                async def add_video(message_text, id_video):
                    if message_text:                        
                        message_text_list = message_text.split(' ; ')
                        if str(message_text_list[2]).isdigit() and len(message_text_list) == 3:
                            try:
                                s = await sync_to_async(lambda: Series.objects.get(id=int(message_text_list[2])))()
                            except:
                                s, _ = await sync_to_async(lambda: Series.objects.get_or_create(name = message_text_list[2]))()
                        elif len(message_text_list) == 3:  # –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ—á–∫–∞ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è c–µ—Ä–∏–∞–ª–∞(–∞–Ω–∏–º–µ) –≤ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç–æ id –≥—Ä—É–ø–ø—ã –≤–∏–¥–æ—Å–æ–≤
                            s, _ = await sync_to_async(lambda: Series.objects.get_or_create(name = message_text_list[2]))()
                        else:
                            await bot.send_message(message.chat.id, f'üìõ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–¥ –≤–∏–¥–µ–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã!</b>', parse_mode='HTML')
                            return False # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ –≤–µ—Ä–Ω–æ
                        number = None
                        video_counts = await sync_to_async(lambda: list(Video.objects.values('series_id', 'season').annotate(num_videos=Count('id'))))()                                    
                        for video_count in video_counts: 
                            if await sync_to_async(lambda: Series.objects.get(id=video_count['series_id']).name)() == s.name:
                                if int(video_count['season']) == int(message_text_list[0]):
                                    number = int(video_count['num_videos']) + 1
                        if not number:
                            number = 1
              
                        video = await sync_to_async(lambda: Video.objects.create(
                            series = s,
                            video_id = id_video,
                            season = message_text_list[0], # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞ –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω—è
                            number = number, # –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏
                            name =  message_text_list[1],  # –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ—á–∫–∞ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏
                        ))()
                        await bot.send_message(message.chat.id, f'–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! \r\n{video.name}, –∫ —Å–µ—Ä–∏–∞–ª—É: <code>{s.name}</code> \r\nC–µ—Ä–∏—è ‚Ññ{video.number}, —Å–µ–∑–æ–Ω {video.season}\r\n #{s.name}', parse_mode='HTML')

                # –ï—Å–ª–∏ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤—Å–µ –ø–æ–¥–≤—è–∑–∞—Ç—å –≤ –±–∞–∑—É
                if message.reply_to_message:
                    id_video = message.reply_to_message.video.file_id
                    if message.text == 'repl': # –ü–∏—à–∏–º repl —á—Ç–æ–±—ã –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥ —Å–∞–º–∏–º –≤–∏–¥–µ–æ, –Ω–µ –≤–ø–∏—Å—ã–≤–∞—è –Ω–æ–≤—ã–µ!
                        message_text = message.reply_to_message.caption
                        await add_video(message_text, id_video)
                    elif len(message.text.split(' ; ')) == 3: # –ò–ª–∏ —Å—Ä–∞–∑—É –ø–∏—à–µ–º –≤—Å–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É
                        message_text = message.text
                        await add_video(message_text, id_video)
                    else:
                        await bot.send_message(message.chat.id, f'üìõ <b>–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã!</b>', parse_mode='HTML')

                if message.content_type == "text" and message.text == "/help":
                    await bot.delete_message(message.chat.id, message.id)
                    await bot.send_message(message.chat.id, settings.HELP_CHANNEL, parse_mode='HTML')

                if message.content_type == "video":
                    id_video = message.video.file_id
                    message_text = message.caption    
                    await add_video(message_text, id_video)

                # –ü–æ—Å—Ç–µ—Ä –∫ —Å–µ—Ä–∏–∞–ª—É
                if message.content_type == "photo":
                    if settings.CHANGE_DESIGN and (message.caption == "Start message" or message.caption == "sm"):  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start
                            with open("StartMessageID", "w") as f:
                                f.write(message.photo[0].file_id)
                            await bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
                    elif settings.CHANGE_DESIGN and (message.caption == "List message" or message.caption == "lm"):  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫
                            with open("ListMessageID", "w") as f:
                                f.write(message.photo[0].file_id)
                            await bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞')
                    elif len(message.caption.split(' ; ')) == 2:
                        id_photo = message.photo[0].file_id
                        message_text_photo = message.caption
                        message_text_list = message_text_photo.split(' ; ')
                        s, cre = await sync_to_async(lambda: Series.objects.get_or_create(
                            name = message_text_list[0],          #–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞
                            defaults={
                            'poster':  id_photo,
                            'description': message_text_list[1] # –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ—á–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞
                            }))()
                        if not cre:
                            s.poster = str(id_photo)
                            s.description = message_text_list[1]
                            await s.asave()
                            await bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω —Å–µ—Ä–∏–∞–ª \r\n–∏–º—è: <code>{s.name}</code> \r\n–û–ø–∏—Å–∞–Ω–∏–µ: {s.description} \r\n#{s.name}', parse_mode='HTML')
                        else:
                            await bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–∏–∞–ª \r\n–∏–º—è: <code>{s.name}</code> \r\n–û–ø–∏—Å–∞–Ω–∏–µ: {s.description}\r\n#{s.name}', parse_mode='HTML')
                    else:
                        await bot.send_message(message.chat.id, f'–§–æ—Ç–æ –Ω–µ –±—ã–ª–æ –Ω–∏–∫—É–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')

        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        @bot.message_handler(content_types=['text'])
        async def work(message):
            try:
                if await update_activity(message.chat.id): # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if await subscription_check(message):    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                        for key, value in settings.KEYBOARD_CONFIG.items():
                            if message.text == value['title']:
                                callback = value['callback']
                                await globals()[callback](message)
                                return
                else:
                    await bot.send_message(message.chat.id, '‚õî–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É\r\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –µ—â–µ —Ä–∞–∑</b> ', reply_markup=main_keyboard, parse_mode='html')
            except:
                await bot.send_message(message.chat.id, f'üò® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –≤–≤–µ–¥–∏—Ç–µ <code>/start</code>', parse_mode='HTML')

        # –†–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        bot.add_custom_filter(asyncio_filters.StateFilter(bot))
        bot.add_custom_filter(asyncio_filters.TextMatchFilter())


        # –ó–∞–ø—É—Å–∫ –Ω–∞ —Å–∏—Å—Ç–µ–º–µ –≤–µ–±—Ö—É–∫–æ–≤
        if settings.WEBHOOK_WORK:
            print('''
- - - - - - - - - - - - - - - - - - - - - - - - - 
                  
Please install uvicorn and fastapi in order to use `run_webhooks` method.

Quick'n'dirty SSL certificate generation:

openssl genrsa -out webhook_pkey.pem 2048
openssl req -new -x509 -days 3650 -key webhook_pkey.pem -out webhook_cert.pem
                  
- - - - - - - - - - - - - - - - - - - - - - - - -   
                  ''')      
            WEBHOOK_SSL_CERT = './webhook_cert.pem'  # Path to the ssl certificate
            WEBHOOK_SSL_PRIV = './webhook_pkey.pem'  # Path to the ssl private key
            if settings.DEBUG:
                response = requests.get('https://ifconfig.me')
                if response.status_code == 200:
                    ip_address = response.text.strip()
                    print(f"\nPublic IP: {ip_address}")
                else:
                    print("\nError fetching IP address\n")
                DOMAIN = ip_address
            else:     
                DOMAIN = settings.ALLOWED_HOSTS[0] # either domain, or ip address of vps
            # it uses fastapi + uvicorn
            asyncio.run(bot.run_webhooks(
                listen=DOMAIN,
                certificate=WEBHOOK_SSL_CERT,
                certificate_key=WEBHOOK_SSL_PRIV,
                debug=settings.DEBUG,            
                ))
        elif settings.DEBUG:
            asyncio.run(bot.delete_webhook(True))
            asyncio.run(bot.polling())
        else:
            asyncio.run(bot.delete_webhook(True))
            asyncio.run(bot.infinity_polling(timeout=50))